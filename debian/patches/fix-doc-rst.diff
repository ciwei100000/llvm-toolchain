Index: llvm-toolchain-snapshot_3.9~svn260815/clang-tools-extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
===================================================================
--- llvm-toolchain-snapshot_3.9~svn260815.orig/clang-tools-extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
+++ llvm-toolchain-snapshot_3.9~svn260815/clang-tools-extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
@@ -32,15 +32,21 @@ Initial expression
 
 The resulting expression ``e`` is modified as follows:
   1. Unnecessary parentheses around the expression are removed.
+
   2. Negated applications of ``!`` are eliminated.
+
   3. Negated applications of comparison operators are changed to use the
      opposite condition.
+
   4. Implicit conversions of pointers, including pointers to members, to
      ``bool`` are replaced with explicit comparisons to ``nullptr`` in C++11
       or ``NULL`` in C++98/03.
+
   5. Implicit casts to ``bool`` are replaced with explicit casts to ``bool``.
+
   6. Object expressions with ``explicit operator bool`` conversion operators
      are replaced with explicit casts to ``bool``.
+
   7. Implicit conversions of integral types to ``bool`` are replaced with
      explicit comparisons to ``0``.
 
Index: llvm-toolchain-snapshot_3.9~svn260815/clang/tools/extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
===================================================================
--- llvm-toolchain-snapshot_3.9~svn260815.orig/clang/tools/extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
+++ llvm-toolchain-snapshot_3.9~svn260815/clang/tools/extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.rst
@@ -32,15 +32,21 @@ Initial expression
 
 The resulting expression ``e`` is modified as follows:
   1. Unnecessary parentheses around the expression are removed.
+
   2. Negated applications of ``!`` are eliminated.
+
   3. Negated applications of comparison operators are changed to use the
      opposite condition.
+
   4. Implicit conversions of pointers, including pointers to members, to
      ``bool`` are replaced with explicit comparisons to ``nullptr`` in C++11
       or ``NULL`` in C++98/03.
+
   5. Implicit casts to ``bool`` are replaced with explicit casts to ``bool``.
+
   6. Object expressions with ``explicit operator bool`` conversion operators
      are replaced with explicit casts to ``bool``.
+
   7. Implicit conversions of integral types to ``bool`` are replaced with
      explicit comparisons to ``0``.
 
