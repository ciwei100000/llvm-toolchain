Index: llvm-toolchain-snapshot_9~svn352610/lldb/source/Plugins/Process/minidump/RegisterContextMinidump_ARM64.cpp
===================================================================
--- llvm-toolchain-snapshot_9~svn352610.orig/lldb/source/Plugins/Process/minidump/RegisterContextMinidump_ARM64.cpp	(révision 360752)
+++ llvm-toolchain-snapshot_9~svn352610/lldb/source/Plugins/Process/minidump/RegisterContextMinidump_ARM64.cpp	(révision 360753)
@@ -782,7 +782,7 @@
   auto regs_data = data.GetData(&offset, sizeof(m_regs.v));
   if (regs_data)
     memcpy(m_regs.v, regs_data, sizeof(m_regs.v));
-  assert(k_num_regs == k_num_reg_infos);
+  static_assert(k_num_regs == k_num_reg_infos, "");
 }
 size_t RegisterContextMinidump_ARM64::GetRegisterCount() { return k_num_regs; }
 
Index: llvm-toolchain-snapshot_9~svn352610/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp
===================================================================
--- llvm-toolchain-snapshot_9~svn352610.orig/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp	(révision 360752)
+++ llvm-toolchain-snapshot_9~svn352610/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp	(révision 360753)
@@ -1972,8 +1972,8 @@
 
   // We want 4 elements from packed data
   const uint32_t num_exprs = 4;
-  assert(num_exprs == (eExprTypeElemPtr - eExprTypeDimX + 1) &&
-         "Invalid number of expressions");
+  static_assert(num_exprs == (eExprTypeElemPtr - eExprTypeDimX + 1),
+                "Invalid number of expressions");
 
   char expr_bufs[num_exprs][jit_max_expr_size];
   uint64_t results[num_exprs];
@@ -2031,8 +2031,8 @@
 
   // We want 4 elements from packed data
   const uint32_t num_exprs = 4;
-  assert(num_exprs == (eExprElementFieldCount - eExprElementType + 1) &&
-         "Invalid number of expressions");
+  static_assert(num_exprs == (eExprElementFieldCount - eExprElementType + 1),
+                "Invalid number of expressions");
 
   char expr_bufs[num_exprs][jit_max_expr_size];
   uint64_t results[num_exprs];
@@ -2090,8 +2090,8 @@
   }
 
   const short num_exprs = 3;
-  assert(num_exprs == (eExprSubelementsArrSize - eExprSubelementsId + 1) &&
-         "Invalid number of expressions");
+  static_assert(num_exprs == (eExprSubelementsArrSize - eExprSubelementsId + 1),
+                "Invalid number of expressions");
 
   char expr_buffer[jit_max_expr_size];
   uint64_t results;
Index: llvm-toolchain-snapshot_9~svn352610/lldb/source/Interpreter/CommandObject.cpp
===================================================================
--- llvm-toolchain-snapshot_9~svn352610.orig/lldb/source/Interpreter/CommandObject.cpp	(révision 360752)
+++ llvm-toolchain-snapshot_9~svn352610/lldb/source/Interpreter/CommandObject.cpp	(révision 360753)
@@ -1103,7 +1103,8 @@
 const CommandObject::ArgumentTableEntry *CommandObject::GetArgumentTable() {
   // If this assertion fires, then the table above is out of date with the
   // CommandArgumentType enumeration
-  assert((sizeof(CommandObject::g_arguments_data) /
-          sizeof(CommandObject::ArgumentTableEntry)) == eArgTypeLastArg);
+  static_assert((sizeof(CommandObject::g_arguments_data) /
+                 sizeof(CommandObject::ArgumentTableEntry)) == eArgTypeLastArg,
+                "");
   return CommandObject::g_arguments_data;
 }
Index: llvm-toolchain-snapshot_9~svn352610/lldb/source/Expression/IRExecutionUnit.cpp
===================================================================
--- llvm-toolchain-snapshot_9~svn352610.orig/lldb/source/Expression/IRExecutionUnit.cpp	(révision 360752)
+++ llvm-toolchain-snapshot_9~svn352610/lldb/source/Expression/IRExecutionUnit.cpp	(révision 360753)
@@ -1023,7 +1023,7 @@
 
 void *IRExecutionUnit::MemoryManager::getPointerToNamedFunction(
     const std::string &Name, bool AbortOnFailure) {
-  assert(sizeof(void *) == 8);
+  static_assert(sizeof(void *) == 8, "");
 
   return (void *)getSymbolAddress(Name);
 }
Index: tools/debugserver/llvm-toolchain-snapshot_9~svn352610/lldb/source/MacOSX/MachVMRegion.cpp
===================================================================
--- tools/debugserver/llvm-toolchain-snapshot_9~svn352610.orig/lldb/source/MacOSX/MachVMRegion.cpp	(révision 360752)
+++ tools/debugserver/llvm-toolchain-snapshot_9~svn352610/lldb/source/MacOSX/MachVMRegion.cpp	(révision 360753)
@@ -122,7 +122,7 @@
   m_start = addr;
   m_depth = 1024;
   mach_msg_type_number_t info_size = kRegionInfoSize;
-  assert(sizeof(info_size) == 4);
+  static_assert(sizeof(info_size) == 4, "");
   m_err =
       ::mach_vm_region_recurse(m_task, &m_start, &m_size, &m_depth,
                                (vm_region_recurse_info_t)&m_data, &info_size);
