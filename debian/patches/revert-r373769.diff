Index: clang/tools/clang-shlib/CMakeLists.txt
===================================================================
--- a/clang/tools/clang-shlib/CMakeLists.txt	(révision 373769)
+++ b/clang/tools/clang-shlib/CMakeLists.txt	(révision 373768)
@@ -6,13 +6,7 @@
 get_property(clang_libs GLOBAL PROPERTY CLANG_STATIC_LIBS)
 
 foreach (lib ${clang_libs})
-  if(XCODE)
-    # Xcode doesn't support object libraries, so we have to trick it into
-    # linking the static libraries instead.
-    list(APPEND _DEPS "-force_load" ${lib})
-  else()
-    list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>)
-  endif()
+  list(APPEND _OBJECTS $<TARGET_OBJECTS:obj.${lib}>)
   list(APPEND _DEPS $<TARGET_PROPERTY:${lib},INTERFACE_LINK_LIBRARIES>)
   list(APPEND _DEPS $<TARGET_PROPERTY:${lib},LINK_LIBRARIES>)
 endforeach ()
Index: clang/cmake/modules/AddClang.cmake
===================================================================
--- a/clang/cmake/modules/AddClang.cmake	(révision 373769)
+++ b/clang/cmake/modules/AddClang.cmake	(révision 373768)
@@ -86,13 +86,9 @@
     # llvm_add_library ignores BUILD_SHARED_LIBS if STATIC is explicitly set,
     # so we need to handle it here.
     if(BUILD_SHARED_LIBS)
-      set(LIBTYPE SHARED)
+      set(LIBTYPE SHARED OBJECT)
     else()
-      set(LIBTYPE STATIC)
-    endif()
-    if(NOT XCODE)
-      # The Xcode generator doesn't handle object libraries correctly.
-      list(APPEND LIBTYPE OBJECT)
+      set(LIBTYPE STATIC OBJECT)
     endif()
     set_property(GLOBAL APPEND PROPERTY CLANG_STATIC_LIBS ${name})
   endif()
